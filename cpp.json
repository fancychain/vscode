{
	// Place your C++ workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"std::": {
		"prefix": "std",
		"body": [
			"std::"
		],
		"description": "std::"
	},
	"for loop": {
		"prefix": "for-loop",
		"body": [
			"for (int ${1:i} = 0; ${1:i} < ${2:count}; ${1:i}++) {",
			"\t",
			"}"
		],
		"description": "For loop"
	},
	"reversed for loop": {
		"prefix": "for-loop-reversed",
		"body": [
			"for (int i = ${1:length} - 1; i >= 0; i--) {",
			"\t${2:/* code */}",
			"}"
		],
		"description": "Reversed for loop"
	},
	"std::cout": {
		"prefix": "cout",
		"body": [
			"std::cout << $1;"
		],
		"description": "std::cout"
	},
	"std::cout + '\\n'": {
		"prefix": "cout-nl",
		"body": [
			"std::cout << $1 << '\\n';"
		],
		"description": "std::cout with new line"
	},
	"std::cout string": {
		"prefix": "cout-str",
		"body": [
			"std::cout << \"$1\";"
		],
		"description": "std::cout string"
	},
	"std::cout string and new line": {
		"prefix": "cout-str-nl",
		"body": [
			"std::cout << \"$1\" << '\\n';"
		],
		"description": "std::cout string and new line"
	},
	"std::cin": {
		"prefix": "cin",
		"body": [
			"std::cin >> ${1:/* variable */};"
		],
		"description": "std::cin"
	},
	"new line": {
		"prefix": "endl",
		"body": [
			"'\\n'"
		],
		"description": "new line"
	},
	"case": {
		"prefix": "case",
		"body": [
			"case $1:",
			"\t$2",
			"\tbreak;"
		],
		"description": "switch case with break"
	},
	"class": {
		"prefix": "class",
		"body": [
			"class $1 {",
			"public:",
			"\t",
			"};"
		],
		"description": "class"
	},
	"main function": {
		"prefix": "main-function",
		"body": [
			"int main() {",
			"\t$1",
			"\treturn 0;",
			"}"
		],
		"description": "main function"
	},
	"main function with args": {
		"prefix": "main-function-args",
		"body": [
			"int main(int argc, const char* argv[]) {",
			"\t$1",
			"\treturn 0;",
			"}"
		],
		"description": "main function with command line arguments"
	},
	"getline": {
		"prefix": "getline",
		"body": [
			"std::getline(std::cin, ${1:/* string */});"
		],
		"description": "getline function"
	},
	"getline without whitespaces": {
		"prefix": "getline-ws",
		"body": [
			"std::getline(std::cin >> std::ws, ${1:/* string */});"
		],
		"description": "getline function without whitespaces at the beginning"
	},
	"include a library": {
		"prefix": "include",
		"body": [
			"#include <${1:iostream}>"
		],
		"description": "include a library"
	},
	"string": {
		"prefix": "string",
		"body": [
			"std::string"
		],
		"description": "std::string"
	},
	"vector": {
		"prefix": "vector",
		"body": [
			"std::vector<${1:int}> $2"
		],
		"description": "std::vector"
	},
	"begin and end": {
		"prefix": "begin-end",
		"body": [
			"$1.begin(), $1.end()"
		],
		"description": ".begin(), .end()"
	}
}
