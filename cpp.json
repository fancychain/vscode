{
	// Place your C++ workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"std::": {
		"prefix": "std",
		"body": [
			"std::$0"
		],
		"description": "std::"
	},
	"for loop": {
		"prefix": "for-loop",
		"body": [
			"for (int ${1:i} = 0; ${1:i} < ${2:count}; ${1:i}++) {",
			"\t${0:$TM_SELECTED_TEXT}",
			"}"
		],
		"description": "For loop"
	},
	"reversed for loop": {
		"prefix": "for-loop-reversed",
		"body": [
			"for (int ${1:i} = ${2:length} - 1; ${1:i} >= 0; ${1:i}--) {",
			"\t${0:$TM_SELECTED_TEXT}",
			"}"
		],
		"description": "Reversed for loop"
	},
	"std::cout": {
		"prefix": "cout",
		"body": [
			"std::cout << ${0:$TM_SELECTED_TEXT};"
		],
		"description": "std::cout"
	},
	"std::cout + '\\n'": {
		"prefix": "cout-nl",
		"body": [
			"std::cout << ${0:$TM_SELECTED_TEXT} << '\\n';"
		],
		"description": "std::cout with new line"
	},
	"std::cout string and new line": {
		"prefix": "cout-str-nl",
		"body": [
			"std::cout << \"${0:$TM_SELECTED_TEXT}\" << '\\n';"
		],
		"description": "std::cout string and new line"
	},
	"std::cin": {
		"prefix": "cin",
		"body": [
			"std::cin >> ${1:$TM_SELECTED_TEXT};"
		],
		"description": "std::cin"
	},
	"new line": {
		"prefix": "endl",
		"body": [
			"'\\n'"
		],
		"description": "new line"
	},
	"case": {
		"prefix": "case",
		"body": [
			"case $1:",
			"\t${0:$TM_SELECTED_TEXT}",
			"\tbreak;"
		],
		"description": "switch case with break"
	},
	"class": {
		"prefix": "class",
		"body": [
			"class $1 {",
			"private:",
			"\t$0",
			"public:",
			"\t",
			"};"
		],
		"description": "class"
	},
	"main function": {
		"prefix": "main-function",
		"body": [
			"int main(${1:int argc, const char* argv[]}) {",
			"\t$0\n",
			"\treturn 0;",
			"}"
		],
		"description": "main function"
	},
	"getline": {
		"prefix": "getline",
		"body": [
			"std::getline(std::cin, ${1:$TM_SELECTED_TEXT});"
		],
		"description": "getline function"
	},
	"getline without whitespaces": {
		"prefix": "getline-ws",
		"body": [
			"std::getline(std::cin >> std::ws, ${1:$TM_SELECTED_TEXT});"
		],
		"description": "getline function without whitespaces at the beginning"
	},
	"include a library": {
		"prefix": ["include", "#include"],
		"body": [
			"#include <${1|iostream,vector,algorithm,regex,cmath,fstream,filesystem,cstdlib,cstring|}>"
		],
		"description": "include a library"
	},
	"include a header": {
		"prefix": ["include-header", "#include-header"],
		"body": [
			"#include \"${1:$TM_SELECTED_TEXT}\""
		],
		"description": "include a header"
	},
	"string": {
		"prefix": "string",
		"body": [
			"std::string"
		],
		"description": "std::string"
	},
	"vector": {
		"prefix": "vector",
		"body": [
			"std::vector<${1:int}> $0"
		],
		"description": "std::vector"
	},
	"begin and end": {
		"prefix": "begin-end",
		"body": [
			"${1:$TM_SELECTED_TEXT}.begin(), ${1:$TM_SELECTED_TEXT}.end()"
		],
		"description": ".begin(), .end()"
	},
	"string to integer": {
		"prefix": "stoi",
		"body": [
			"std::stoi(${1:$TM_SELECTED_TEXT})"
		],
		"description": "string to integer"
	},
	"convert number to string": {
		"prefix": "to_string",
		"body": [
			"std::to_string(${1:$TM_SELECTED_TEXT})"
		],
		"description": "convert number to string"
	},
	"get random number": {
		"prefix": "random",
		"body": [
			"${0:$RANDOM}"
		],
		"description": "get 6-digit random number"
	},
	"set variable in constructor": {
		"prefix": "this-constructor",
		"body": [
			"this->${1:$CLIPBOARD} = ${1:$CLIPBOARD};"
		],
		"description": "set variable in constructor"
	}
	// "get today's date": {
	// 	"prefix": "today",
	// 	"body": [
	// 		"${0:$CURRENT_YEAR-$CURRENT_MONTH-$CURRENT_DATE}"
	// 	],
	// 	"description": "get today's date"
	// }
}
